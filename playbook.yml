---
- name: Setup Development Environment
  hosts: localhost
  connection: local
  become: no  # Change this to 'no' to run as the current user
  vars:
    repo_url: "https://github.com/meetorman/terminal-god.git"
    config_dir: "{{ ansible_env.HOME }}/.config/nvim"
    ansible_python_interpreter: /usr/bin/python3

  tasks:

    - name: Get the user's home directory
      command: echo $HOME
      register: user_home
      changed_when: false

    - name: Ensure ~/.config directory exists
      file:
        path: "{{ user_home.stdout }}/.config"
        state: directory
        mode: '0755'

    - name: Remove existing ~/.config/nvim if it exists
      file:
        path: "{{ user_home.stdout }}/.config/nvim"
        state: absent

    - name: Clone terminal-god repository
      git:
        repo: "{{ repo_url }}"
        dest: "/tmp/terminal-god"
        version: main
      environment:
        HTTP_PROXY: "{{ lookup('env', 'HTTP_PROXY') }}"
        HTTPS_PROXY: "{{ lookup('env', 'HTTPS_PROXY') }}"
        NO_PROXY: "{{ lookup('env', 'NO_PROXY') }}"

    - name: Move terminal-god to ~/.config/nvim
      command: mv /tmp/terminal-god "{{ user_home.stdout }}/.config/nvim"
      args:
        creates: "{{ user_home.stdout }}/.config/nvim"

    - name: Create symbolic link for tmux config
      file:
        src: "{{ user_home.stdout }}/.config/nvim/.tmux.conf"
        dest: "{{ user_home.stdout }}/.tmux.conf"
        state: link

    - name: Install Homebrew packages
      community.general.homebrew:
        name:
          - tmux
          - nvim
          - lazygit
          - wget
          - mercurial
          - ripgrep
          - fd
          - black
          - isort
          - stylua
          - php
          - julia
          - composer
          - rust
          - go
          - openjdk
        state: present
      become: no

    - name: Install GNU tar
      community.general.homebrew:
        name: gnu-tar
        state: present
      become: no

    - name: Download and extract Lua
      unarchive:
        src: https://www.lua.org/ftp/lua-5.1.5.tar.gz
        dest: /tmp
        remote_src: yes
      environment:
        PATH: /usr/local/opt/gnu-tar/libexec/gnubin:{{ ansible_env.PATH }}

    - name: Build and install Lua
      shell: |
        cd /tmp/lua-5.1.5
        make macosx
        make install
      args:
        creates: /usr/local/bin/lua
      become: yes  # Run as root

    - name: Download and extract LuaRocks
      unarchive:
        src: https://luarocks.github.io/luarocks/releases/luarocks-3.11.1.tar.gz
        dest: /tmp
        remote_src: yes
      environment:
        PATH: /usr/local/opt/gnu-tar/libexec/gnubin:{{ ansible_env.PATH }}

    - name: Configure, build, and install LuaRocks
      shell: |
        cd /tmp/luarocks-3.11.1
        ./configure --with-lua=/usr/local/ --lua-version=5.1
        make
        make install
      args:
        creates: /usr/local/bin/luarocks
      become: yes  # Run as root

    - name: Install global npm packages
      npm:
        name: "{{ item }}"
        global: yes
      loop:
        - neovim
        - prettier
      become: no  # Don't use sudo for npm global installs

    - name: Check OpenJDK installation path
      stat:
        path: /opt/homebrew/opt/openjdk/libexec/openjdk.jdk
      register: openjdk_path

    - name: Create symlink for Java (Apple Silicon)
      file:
        src: /opt/homebrew/opt/openjdk/libexec/openjdk.jdk
        dest: /Library/Java/JavaVirtualMachines/openjdk.jdk
        state: link
      when: openjdk_path.stat.exists
      become: yes  # Run as root

    - name: Check OpenJDK installation path (Intel fallback)
      stat:
        path: /usr/local/opt/openjdk/libexec/openjdk.jdk
      register: openjdk_path_intel
      when: not openjdk_path.stat.exists

    - name: Create symlink for Java (Intel Mac)
      file:
        src: /usr/local/opt/openjdk/libexec/openjdk.jdk
        dest: /Library/Java/JavaVirtualMachines/openjdk.jdk
        state: link
      when: 
        - not openjdk_path.stat.exists
        - openjdk_path_intel.stat.exists
      become: yes  # Run as root

    - name: Print warning if OpenJDK not found
      debug:
        msg: "WARNING: OpenJDK installation not found. Please ensure it's installed via Homebrew."
      when: 
        - not openjdk_path.stat.exists
        - not openjdk_path_intel.stat.exists

    - name: Install packaging Python library
      pip:
        name: packaging
        extra_args: --user
      become: no

    - name: Install neovim Python package
      pip:
        name: neovim
        extra_args: --user
      become: no

- name: Finalize setup
  hosts: localhost
  connection: local
  tasks:
    - name: Print setup complete message
      debug:
        msg: "Setup complete. Please restart your terminal or run 'source ~/.zshrc'"

name: Neovim Lazy.nvim Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Neovim
      - name: Install Neovim
        run: |
          sudo apt-get update
          sudo snap install nvim --classic

      # Step 3: Install dependencies (Python and Node.js)
      - name: Install Python and Node.js
        run: |
          sudo apt-get install -y python3-pip
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          nvm install v20.18.0

        # Step 4: Install Neovim plugins using Lazy.nvim
      - name: Load Neovim plugins
        run: |
          nvim --headless "+Lazy! sync" +qall
        env:
          HOME: ${{ runner.workspace }}

      # Step 5: Create a Snapshot (lockfile)
      - name: Create a snapshot of installed plugins
        run: |
          nvim --headless "+Lazy snapshot lazy-lock.json" +qall
        env:
          HOME: ${{ runner.workspace }}

      # Step 6: Create a release on GitHub
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v1.0.${{ github.run_number }}"
          release_name: "Neovim Config Release v1.0.${{ github.run_number }}"
          draft: false
          prerelease: false

      # Step 7: Upload the snapshot file to the release
      - name: Upload snapshot to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./lazy-lock.json"
          asset_name: "lazy-lock.json"
          asset_content_type: "application/json"

